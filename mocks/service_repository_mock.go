// Code generated by MockGen. DO NOT EDIT.
// Source: airport-app-backend/services (interfaces: IServiceRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	services "airport-app-backend/services"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIServiceRepository is a mock of IServiceRepository interface.
type MockIServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceRepositoryMockRecorder
}

// MockIServiceRepositoryMockRecorder is the mock recorder for MockIServiceRepository.
type MockIServiceRepositoryMockRecorder struct {
	mock *MockIServiceRepository
}

// NewMockIServiceRepository creates a new mock instance.
func NewMockIServiceRepository(ctrl *gomock.Controller) *MockIServiceRepository {
	mock := &MockIServiceRepository{ctrl: ctrl}
	mock.recorder = &MockIServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceRepository) EXPECT() *MockIServiceRepositoryMockRecorder {
	return m.recorder
}

// NewServiceRepository mocks base method.
func (m *MockIServiceRepository) NewServiceRepository(arg0 *gorm.DB) services.ServiceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewServiceRepository", arg0)
	ret0, _ := ret[0].(services.ServiceRepository)
	return ret0
}

// NewServiceRepository indicates an expected call of NewServiceRepository.
func (mr *MockIServiceRepositoryMockRecorder) NewServiceRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewServiceRepository", reflect.TypeOf((*MockIServiceRepository)(nil).NewServiceRepository), arg0)
}
